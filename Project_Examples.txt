
void example1(int n) {
    for (int i = 0; i < n; i++) {
        printf("hello world");
    }
}

void example2(int n) {
    int i = 0;
    while (i < n) {
        i++;
    }
}

void example3(int arr[n], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = i * 2;
    }
}


void example4(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            // O(1) work here
        }
    }
}

void example5(int n) {
    int i = 0;
    while (i < n) {
        int j = 0;
        while (j < n) {
            j++;
        }
        i++;
    }
}
```


void example6(int matrix[n][n], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = i + j;
        }
    }
}

void example7(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                // O(1) work here
            }
        }
    }
}

void example8(int A[n][n], int B[n][n], int C[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void example9(int matrix[n][n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                matrix[i][j][k] = i + j + k;
            }
        }
    }
}

int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n-1) + fibonacci(n-2);
}

int linearSearch(int arr[], int n, int key) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == key) return i;
    }
    return -1;
}

int binarySearch(int arr[], int l, int r, int key) {
    while (l <= r) {
        int mid = l + (r - l) / 2;
        if (arr[mid] == key) return mid;
        if (arr[mid] < key) l = mid + 1;
        else r = mid - 1;
    }
    return -1;
}

void logStepLadderLoop(int n) {
    for (int i = 1; i < n; i *= 2) {  // Loop doubles at each step
        for (int j = 0; j < i; j++) {
            // O(1) work here
        }
    }
}



#include <stdio.h>

int largestPowerOfTwo(int n) {
    int power = 1;
    while (power <= n) {
        power <<= 1; // Multiply by 2
    }
    return power >> 1; // Return the largest power of 2 less than n
}

#include <stdio.h>

void printPowersOfTwo(int n) {
    for (int i = 1; i <= n; i *= 2) {
        printf("%d ", i);
    }
}


int *arr = (int *)malloc(n * sizeof(int)); // Allocates memory for an array of 'n' integers

